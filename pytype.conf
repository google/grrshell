# NOTE: All relative paths are relative to the location of this file.

[pytype]

# Space-separated list of files or directories to exclude.
#exclude =
#    **/*_test.py
#    **/test_*.py

# Space-separated list of files or directories to process.
inputs = grrshell

# Keep going past errors to analyze as many files as possible.
keep_going = False

# Run N jobs in parallel. When 'auto' is used, this will be equivalent to the
# number of CPUs on the host system.
jobs = auto

# All pytype output goes here.
output = .pytype

# Platform (e.g., "linux", "win32") that the target code runs on.
platform = linux

# Paths to source code directories, separated by ':'.
pythonpath = .

# Python version (major.minor) of the target code.
#python_version = 3.10

# Enable parameter count checks for overriding methods with renamed arguments.
# This flag is temporary and will be removed once this behavior is enabled by
# default.
overriding_renamed_parameter_count_checks = False

# Use the enum overlay for more precise enum checking. This flag is temporary
# and will be removed once this behavior is enabled by default.
use_enum_overlay = False

# Variables initialized as None retain their None binding. This flag is
# temporary and will be removed once this behavior is enabled by default.
strict_none_binding = False

# Support the third-party fiddle library. This flag is temporary and will be
# removed once this behavior is enabled by default.
use_fiddle_overlay = False

# Opt-in: Do not allow Any as a return type.
no_return_any = False

# Experimental: Infer precise return types even for invalid function calls.
precise_return = False

# Experimental: Solve unknown types to label with structural types.
protocols = False

# Experimental: Only load submodules that are explicitly imported.
strict_import = False

# Experimental: Enable exhaustive checking of function parameter types.
strict_parameter_checks = False

# Experimental: Emit errors for comparisons between incompatible primitive
# types.
strict_primitive_comparisons = False

# Experimental: Check that variables are defined in all possible code paths.
strict_undefined_checks = False

# Space-separated list of error names to ignore.
disable =
    pyi-error

# Don't report errors.
report_errors = True
